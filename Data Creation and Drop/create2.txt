-- 1. Department
CREATE TABLE Department (
    DepartmentID VARCHAR(50) PRIMARY KEY,
    DepartmentName VARCHAR(100) NOT NULL,
    DepartmentDesc VARCHAR(255),
    DepartmentStatus VARCHAR(50) DEFAULT 'Active' NOT NULL CHECK (DepartmentStatus IN ('Active', 'Inactive'))
);

-- 2. Staff
CREATE TABLE Staff (
    StaffID VARCHAR(50) PRIMARY KEY,
    StaffName VARCHAR(100) NOT NULL,
    StaffContactNo VARCHAR(15) NOT NULL,
    StaffIC VARCHAR(20) NOT NULL,
    StaffStatus VARCHAR(50) DEFAULT 'Active' NOT NULL CHECK (StaffStatus IN ('Active', 'Inactive')),
    Salary DECIMAL(10,2) NOT NULL CHECK (Salary >= 0),
    DepartmentID VARCHAR(50) NOT NULL,
    FOREIGN KEY (DepartmentID) REFERENCES Department(DepartmentID)
);

-- 3. Member
CREATE TABLE Member (
    MemberID VARCHAR(50) PRIMARY KEY,
    MemberName VARCHAR(100) NOT NULL,
    MemberContactNo VARCHAR(15) NOT NULL,
    Points INT DEFAULT 0 NOT NULL CHECK (Points >= 0),
    Email VARCHAR(100) NOT NULL,
    Password VARCHAR(100) NOT NULL,
    MemberStatus VARCHAR(50) DEFAULT 'Active' NOT NULL CHECK (MemberStatus IN ('Active', 'Inactive')),
    MembershipLevel VARCHAR(50) DEFAULT 'Bronze' NOT NULL CHECK (MembershipLevel IN ('Platinum', 'Gold', 'Silver', 'Bronze')),
    RegistrationDate TIMESTAMP NOT NULL
);

-- 4. Airplane
CREATE TABLE Airplane (
    AirplaneID VARCHAR(50) PRIMARY KEY,
    Model VARCHAR(50) NOT NULL,
    Capacity INT NOT NULL CHECK (Capacity > 0),
    AirplaneStatus VARCHAR(50) DEFAULT 'Active' NOT NULL CHECK (AirplaneStatus IN ('Active', 'Maintaining', 'Inactive'))
);

-- 5. Maintenance
CREATE TABLE Maintenance (
    MaintenanceID VARCHAR(50) PRIMARY KEY,
    MaintenanceName VARCHAR(100) NOT NULL,
    MaintenanceDesc VARCHAR(255),
    MaintenanceStatus VARCHAR(50) DEFAULT 'Active' NOT NULL CHECK (MaintenanceStatus IN ('Active', 'Inactive'))
);

-- 6. Part
CREATE TABLE Part (
    PartID VARCHAR(50) PRIMARY KEY,
    PartName VARCHAR(100) NOT NULL,
    PartDesc VARCHAR(255),
    PartCost DECIMAL(10,2) NOT NULL CHECK (PartCost >= 0),
    PartStatus VARCHAR(50) DEFAULT 'Active' NOT NULL CHECK (PartStatus IN ('Active', 'Inactive'))
);

-- 7. AirplaneMaintenance
CREATE TABLE AirplaneMaintenance (
    AirplaneID VARCHAR(50) NOT NULL,
    PartID VARCHAR(50) NOT NULL,
    MaintenanceID VARCHAR(50) NOT NULL,
    AirplaneMaintenanceDate TIMESTAMP NOT NULL,
    AirplaneMaintenanceStatus VARCHAR(50) DEFAULT 'Pending' NOT NULL CHECK (AirplaneMaintenanceStatus IN ('Completed', 'Pending')),
    PartQty INT CHECK (PartQty > 0),
    StaffID VARCHAR(50),
    PRIMARY KEY (AirplaneID, PartID, MaintenanceID),
    FOREIGN KEY (AirplaneID) REFERENCES Airplane(AirplaneID),
    FOREIGN KEY (PartID) REFERENCES Part(PartID),
    FOREIGN KEY (MaintenanceID) REFERENCES Maintenance(MaintenanceID),
    FOREIGN KEY (StaffID) REFERENCES Staff(StaffID)
);

-- 8. Flight
CREATE TABLE Flight (
    FlightID VARCHAR(50) PRIMARY KEY,
    Origin VARCHAR(50) NOT NULL,
    Destination VARCHAR(50) NOT NULL,
    DepartureTime TIMESTAMP NOT NULL,
    ActualDepartureTime TIMESTAMP,
    ArrivalTime TIMESTAMP NOT NULL,
    ActualArrivalTime TIMESTAMP,
    FlightBasePrice DECIMAL(10,2) NOT NULL CHECK (FlightBasePrice > 0),
    FlightStatus VARCHAR(50) DEFAULT 'On Time' NOT NULL CHECK (FlightStatus IN ('On Time', 'Delayed', 'Cancelled', 'Boarding', 'Scheduled')),
    AirplaneID VARCHAR(50) NOT NULL,
    FOREIGN KEY (AirplaneID) REFERENCES Airplane(AirplaneID)
);

-- 9. FlightStaff
CREATE TABLE FlightStaff (
    FlightID VARCHAR(50) NOT NULL,
    StaffID VARCHAR(50) NOT NULL,
    Role VARCHAR(50) NOT NULL,
    PRIMARY KEY (FlightID, StaffID),
    FOREIGN KEY (FlightID) REFERENCES Flight(FlightID),
    FOREIGN KEY (StaffID) REFERENCES Staff(StaffID)
);

-- 10. Booking
CREATE TABLE Booking (
    BookingID VARCHAR(50) PRIMARY KEY,
    BookingTime TIMESTAMP NOT NULL,
    BookingStatus VARCHAR(50) DEFAULT 'Pending' NOT NULL CHECK (BookingStatus IN ('Pending', 'Completed', 'Cancelled')),
    PointEarned INT DEFAULT 0 NOT NULL CHECK (PointEarned >= 0),
    MemberID VARCHAR(50) NOT NULL,
    FOREIGN KEY (MemberID) REFERENCES Member(MemberID)
);

-- 11. SeatClass
CREATE TABLE SeatClass (
    ClassID VARCHAR(50) PRIMARY KEY,
    ClassType VARCHAR(100) NOT NULL,
    ClassRate DECIMAL(4,2) NOT NULL,
    LuggageWeightLimit DECIMAL(6,2) NOT NULL
);

-- 12. Passenger
CREATE TABLE Passenger (
    PassengerID VARCHAR(50) PRIMARY KEY,
    PassengerName VARCHAR(100) NOT NULL,
    PassengerContactNo VARCHAR(15) NOT NULL,
    PassengerIC VARCHAR(20) NOT NULL
);

-- 13. Insurance
CREATE TABLE Insurance (
    InsuranceID VARCHAR(50) PRIMARY KEY,
    CoverageType VARCHAR(50) NOT NULL,
    Premium DECIMAL(10,2) NOT NULL CHECK (Premium >= 0),
    InsuranceStatus VARCHAR(50) DEFAULT 'Active' NOT NULL CHECK (InsuranceStatus IN ('Active', 'Inactive'))
);

-- 14. Ticket
CREATE TABLE Ticket (
    TicketID VARCHAR(50) PRIMARY KEY,
    SeatNumber VARCHAR(10) NOT NULL,
    ClassID VARCHAR(50) NOT NULL,
    TicketStatus VARCHAR(50) DEFAULT 'Pending' NOT NULL CHECK (TicketStatus IN ('Completed', 'Checked-In', 'Pending', 'Cancelled', 'Invalid')),
    BookingID VARCHAR(50) NOT NULL,
    PassengerID VARCHAR(50) NOT NULL,
    InsuranceID VARCHAR(50),
    FlightID VARCHAR(50) NOT NULL,
    TicketPrice DECIMAL(10,2) NOT NULL CHECK (TicketPrice >= 0),
    FOREIGN KEY (ClassID) REFERENCES SeatClass(ClassID),
    FOREIGN KEY (BookingID) REFERENCES Booking(BookingID),
    FOREIGN KEY (PassengerID) REFERENCES Passenger(PassengerID),
    FOREIGN KEY (InsuranceID) REFERENCES Insurance(InsuranceID),
    FOREIGN KEY (FlightID) REFERENCES Flight(FlightID)
);

-- 15. InsuranceClaim
CREATE TABLE InsuranceClaim (
    ClaimID VARCHAR(50) PRIMARY KEY,
    ClaimDate TIMESTAMP NOT NULL,
    ClaimAmount DECIMAL(10,2) NOT NULL CHECK (ClaimAmount >= 0),
    ClaimStatus VARCHAR(50) DEFAULT 'Pending' NOT NULL CHECK (ClaimStatus IN ('Approved', 'Processed', 'Denied', 'Pending')),
    ClaimReason VARCHAR(255),
    TicketID VARCHAR(50) NOT NULL,
    FOREIGN KEY (TicketID) REFERENCES Ticket(TicketID)
);

-- 16. Luggage
CREATE TABLE Luggage (
    LuggageID VARCHAR(50) PRIMARY KEY,
    Weight DECIMAL(5,2) NOT NULL CHECK (Weight >= 0),
    LuggageSize VARCHAR(50) NOT NULL CHECK (LuggageSize IN ('S', 'M', 'L', 'XL', 'XXL')),
    LuggageStatus VARCHAR(50) DEFAULT 'Pending' NOT NULL CHECK (LuggageStatus IN ('On Hold', 'Claimed', 'Pending', 'Lost')),
    TicketID VARCHAR(50) NOT NULL,
    FOREIGN KEY (TicketID) REFERENCES Ticket(TicketID)
);

-- 17. UpgradeRequest
CREATE TABLE UpgradeRequest (
    RequestID VARCHAR(50) PRIMARY KEY,
    RequestStatus VARCHAR(50) DEFAULT 'Pending' NOT NULL CHECK (RequestStatus IN ('Approved', 'Rejected', 'Pending')),
    ClassID VARCHAR(50) NOT NULL,
    RequestDate TIMESTAMP NOT NULL,
    UpgradeReason VARCHAR(255),
    TicketID VARCHAR(50) NOT NULL,
    FOREIGN KEY (ClassID) REFERENCES SeatClass(ClassID),
    FOREIGN KEY (TicketID) REFERENCES Ticket(TicketID)
);

-- 18. Purchase
CREATE TABLE Purchase (
    PurchaseID VARCHAR(50) PRIMARY KEY,
    PurchaseDate TIMESTAMP NOT NULL,
    PurchaseStatus VARCHAR(50) DEFAULT 'Placed' NOT NULL CHECK (PurchaseStatus IN ('Placed', 'Failed')),
    PassengerID VARCHAR(50) NOT NULL,
    FOREIGN KEY (PassengerID) REFERENCES Passenger(PassengerID)
);

-- 19. Item
CREATE TABLE Item (
    ItemID VARCHAR(50) PRIMARY KEY,
    ItemName VARCHAR(100) NOT NULL,
    Price DECIMAL(10,2) NOT NULL CHECK (Price >= 0),
    Category VARCHAR(50) NOT NULL,
    ItemStatus VARCHAR(50) DEFAULT 'Available' NOT NULL CHECK (ItemStatus IN ('Available', 'Out of Stock', 'Unavailable'))
);

-- 20. PurchaseItem
CREATE TABLE PurchaseItem (
    PurchaseID VARCHAR(50) NOT NULL,
    ItemID VARCHAR(50) NOT NULL,
    PurchaseItemQty INT NOT NULL CHECK (PurchaseItemQty > 0),
    PRIMARY KEY (PurchaseID, ItemID),
    FOREIGN KEY (PurchaseID) REFERENCES Purchase(PurchaseID),
    FOREIGN KEY (ItemID) REFERENCES Item(ItemID)
);

-- 21. Payment
CREATE TABLE Payment (
    PaymentID VARCHAR(50) PRIMARY KEY,
    PaymentAmount DECIMAL(10,2) NOT NULL CHECK (PaymentAmount >= 0),
    PaymentMethod VARCHAR(50) NOT NULL,
    PaymentStatus VARCHAR(50) DEFAULT 'Pending' NOT NULL CHECK (PaymentStatus IN ('Completed', 'Incomplete', 'Failed', 'Pending', 'Refunded')),
    PaymentDate TIMESTAMP NOT NULL,
    BookingID VARCHAR(50),
    PurchaseID VARCHAR(50),
    FOREIGN KEY (BookingID) REFERENCES Booking(BookingID),
    FOREIGN KEY (PurchaseID) REFERENCES Purchase(PurchaseID)
);

-- 22. Refund
CREATE TABLE Refund (
    RefundID VARCHAR(50) PRIMARY KEY,
    RefundAmount DECIMAL(10,2) NOT NULL CHECK (RefundAmount >= 0),
    RefundStatus VARCHAR(50) DEFAULT 'Pending' NOT NULL CHECK (RefundStatus IN ('Completed', 'Incomplete', 'Pending')),
    RefundDate TIMESTAMP NOT NULL,
    RefundReason VARCHAR(255) NOT NULL,
    PaymentID VARCHAR(50) NOT NULL,
    FOREIGN KEY (PaymentID) REFERENCES Payment(PaymentID)
);

SELECT table_name FROM user_tables;
